Minimalistic packets for Outbreak file2:

connect:
00000000  01 18 00 05 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 01 20  00 00 00 00 00 00 00 00  |....... ........|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  6b b5 56 bd 4e 24 c2 b2  |........k.V.N$..|
00000050  0d 9d a8 bf 74 31 94 e0  61 db 6a 5c ec 6f cb 3e  |....t1..a.j\.o.>|
00000060  94 6f 41 1d b3 c0 15 7e  8f ae 88 55 75 a9 f9 3e  |.oA....~...Uu..>|
00000070  1e 9c 80 65 0a 6f 5a 2f  92 4f b8 9e 46 3c f0 bb  |...e.oZ/.O..F<..|
00000080  46 a4 55 d4 d4 e9 5a 15  a2 bd d5 0a dd ed 9f 63  |F.U...Z........c|
00000090  0a a9 10 cc 87 30 58 da  6f 94 3a 0d 71 96 06 90  |.....0X.o.:.q...|
000000a0  9f 55 11 c2 56 d6 a7 7c  18 cb 9a 92 fb 85 e4 14  |.U..V..|........|
000000b0  ab 7d 6e 85 9e 61 3a c8  38 e2 69 15 81 ef 0b 17  |.}n..a:.8.i.....|
000000c0  27 4a f6 b9 ca 5d d0 53  e0 80 76 4e f5 c1 0c 97  |'J...].S..vN....|
000000d0  36 d6 e3 e9 4c 23 02 2f  4f 09 e0 b7 c6 14 c2 40  |6...L#./O......@|
000000e0  9a 79 a3 5c d7 c4 b7 b7  00 00 00 00 00 00 00 00  |.y.\............|
000000f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000100  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000120  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000130  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000140  00 00 00 00 00 00 00 00                           |........|
00000148

other:
00000000  01 18 80 06 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 82  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000a0  00 00 00 00 00 00 00 00  00 00                    |..........|
000000aa




Let's test some 0x80 payloads...
for example 01 00 ... or 00 ... or aa ..

	70ca08

	a0 = 77bff0 bigint struct to our swapped bytes at 768ac0

	a1 = 764cd8 bigint struct with data at 766030
		   01 00 01 00 00 00 00 00
		   => 65537! could be the exponent for RSA

	a2 = 764ccc bigint struct with data at 7689c0
			8B 58 55 AF 67 3D BA EF EB FF 5D F2 58 52 09 FB
			BB 4F BE 76 91 00 F4 A1 EB 3C 25 8B 6D 6A E2 CE
			AB 46 87 5F 94 67 D8 7C B2 94 91 5D 63 62 74 99
			83 D3 96 C8 48 09 68 AC 76 9E F5 76 59 0A 78 49
			39 FD F8 55 A0 94 4D 2B 1D 2A 7F CC 19 7C 19 56
			2D 7D 20 55 57 B7 5D 36 06 39 1B 82 C5 91 11 C0
			3C E9 ED 31 87 B3 DE F1 37 AF A6 4C C7 A7 19 7E
			E1 D8 DC 1A A6 69 93 B5 AC 3D 94 2D 07 8C 71 B2
			=> possible RSA public key of the game

	the result is simply 01 00 00 ... (0x80 bytes) for a success!

	test data from the packet (offset 0x48 or 0x20 in 120chunk)
      with the possible RSA key as modulo and exponent 65537:
		00 01 FF FF FF FF FF FF FF FF 00 5F 18 37 CF 39
		08 9A A7 B9 41 AC AA 32 8B 99 57 F2 67 29 5C 74
		EA 26 CB 0C 47 C4 7B 83 0C 9E E2 24 D5 B2 5E DD
		4D 05 97 8F B2 41 C2 3D DB 19 30 42 42 8D B6 2C
		B3 82 39 FB 47 B4 7F 53 52 62 78 27 15 D6 05 62
		DC 9C F1 8F DE B3 CC B9 CD FC FB 10 8A B2 3D 3E
		35 76 39 7C 2A B9 CF 7C 1B 47 A4 30 1E A9 92 FB
		46 84 8A 24 38 57 DD 06 54 D9 16 DE 8B 53 1C C0
		=> looks too good to be a random value ;)


a0 = bigint struct to encrypted data
a1 = bigint struct to exponent (65537)
a2 = bigint struct to modulo
a3 = bigint struct for the result a3 = a0 pow a1 mod a2

1) first break at 70ca08 (3%)
	a0 = 11,10,766ac0	0890a713 228f090f ... 
	a1 = 2,1,764a30		01000100 00...
	a2 = 11,10,7669c0	adcbf2db 392232b6 ...
	a3 = 23,10,7679c0	83e7be48 7766b7fe 6c267d08 66b5b6e7
						f3ad8592 00ffffff ffffffff ffffffff
						ffffffff ffffffff ffffffff ffffffff
						ffffffff ffffffff ffffffff ffffffff
						ffffffff ffffffff ffffffff ffffffff
						ffffffff ffffffff ffffffff ffffffff
						ffffffff ffffffff ffffffff ffffffff
						ffffffff ffffffff ffffffff ffff0100

2) second break at 70ca08 (40%)
	a0 = 11,10,768ac0	ae071bda 3239ed4a 27e48806 a7b56d5b ...
	a1 = 2,1,766030		01000100 00...
	a2 = 11,10,7689c0	adcbf2db 392232b6 ...
	a3 = 23,10,766bc0	f0e5db8a ee8a80bb 14887898 63e7028d
						
3) third break at 70ca08 (50%)
	a0 = 11,10,768ac0	53d05dca b9f64a27 170bef81 1569e238
						...
						e0943174 bfa89d0d b2c2244e bd56b56b
	a1 = 2,1,766030		01000100 00...
	a2 = 11,10,7689c0	8b5855af 673dbaef ebff5df2 585209fb
						...
						e1d8dc1a a66993b5 ac3d942d 078c71b2
	a3 = 23,10,766bc0	c01c538b de16d954 06dd5738 248a8446
						...
						39cf3718 5f00ffff ffffffff ffff0100

	the modulo is taken from the payload of the connect-packet (0x80 bytes = 1024 bit)!

Let's trace this one back.
	after RSA this happens:
	7141b4
	714138	bigint_testZero (8b5855af ...) returns v0=0x400
	714160
		70c668
		70c6a4	bigint_testZero (decrypted data: c01c538b ...) returns v0 = 0x3f1
		70c704	fill encrypted data with zeroes
		70c71c
			70c760 (bigint struct decrypted data, size bytes, dst ptr)
				    swaps the decrypted data:
					0001ffff ffffffff ffff005f 1837cf39
					089aa7b9 41acaa32 8b9957f2 67295c74
					ea26cb0c 47c47b83 0c9ee224 ........
					........ 3857dd06 54d916de 8b531cc0
	7141c0	clear bigint (53d05dca ... bd56b568)
	7141c8	clear bigint (c01c538b ... ffff0100)
	71421c	return to 71403c
			
	714044	v0=0x80, v1=0, a0=0x80
	71405c	s5=ptr to the decrypted and swapped bytes
	714080	memcpy zeroes to zeros ?
	7140b0	return to 70276c
	70278c	return to 7035a4
	7035c0
		7027e0
	7035e4	check_padding
	703620	memcpy (0x75 data after the padding: 5f1837cf ...8b531cc0)
	703644	return to 7030b4
	7030d0	return to 71c4d0
	71c554
		704ad8 ???
		7125d8 ???
	715c8c	return to 71cafc
	71cafc	check!!!

Next step: analyse 704ad8 and 7125d8


What we've got here is an RSA decrypted block (see PKCS#5 1.5):

0001ffffffffffffffff00
5f1837cf39089aa7b941acaa328b9957
f267295c74ea26cb0c47c47b830c9ee2
24d5b25edd4d05978fb241c23ddb1930
42428db62cb38239fb47b47f53526278
2715d60562dc9cf18fdeb3ccb9cdfcfb
108ab23d3e3576397c2ab9cf7c1b47a4
301ea992fb46848a243857dd0654d916
de8b531cc0

How is the data treated then? What's the meaning? Checksum or what?

Break into 71c4d0 and see which register points to the data.
data 77c1e0, bp on mem access
71cb68	copy 0x75 to 7504c8 (new bp)
71cc94	obfuscate 77c1e0
6b5234	...
But we're past the 2nd check already.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
TEST: Let's break right after RSA decryption (third break on 70ca08 and a3 holds structure for result)
      and set 0x75 bytes to Zero.

Interesting result! DNAS is passed, so it only checks for the padding bytes to be intact and uses
the 0x75 data for further processing, I guess for the second packet (which we already ignore).

So, we don't have the private key to encrypt the payload, but we can use one with many zeros or 
any other data to create a fake packet.

TEST2: Like TEST1 but set data to have as many FF as possible.
766bc0 holds the data
0001ff...00ff

Yep, I'm right, here's the created second query for each test, only one byte changed

/usr/local/apache2/htdocs/dnas/gai-gw # hexdump -C dump_other.raw
00000000  01 18 80 01 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 90  24 ca 78 91 72 af 78 da  |........$.x.r.x.|
00000030  24 ca 78 91 72 af 78 da  00 00 00 00 00 00 00 00  |$.x.r.x.........|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000000b0  00 00 00 00 00 00 00 00                           |........|
000000b8
/usr/local/apache2/htdocs/dnas/gai-gw # hexdump -C dump_other.raw
00000000  01 18 80 01 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 90  24 ca 78 91 72 af 78 da  |........$.x.r.x.|
00000030  24 ca 78 91 72 af 78 da  ff 00 00 00 00 00 00 00  |$.x.r.x.........|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000000b0  00 00 00 00 00 00 00 00                           |........|
000000b8

Just for the lulz and prove we're in control:
/usr/local/apache2/htdocs/dnas/gai-gw # hexdump -C dump_other.raw
00000000  01 18 80 01 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 90  24 ca 78 91 72 af 78 da  |........$.x.r.x.|
00000030  24 ca 78 91 72 af 78 da  74 78 65 74 20 68 74 69  |$.x.r.x.txet hti|
00000040  77 20 65 63 61 70 73 20  65 68 74 20 70 75 20 67  |w ecaps eht pu g|
00000050  6e 69 6c 6c 69 66 20 74  73 75 4a 20 21 65 73 6f  |nillif tsuJ !eso|
00000060  6c 63 20 73 69 20 67 6e  69 6b 61 66 20 6c 6c 75  |lc si gnikaf llu|
00000070  46 20 2e 79 74 69 72 75  63 73 62 6f 20 79 62 20  |F .ytirucsbo yb |
00000080  79 74 69 72 75 63 65 73  20 65 72 75 70 20 73 69  |ytiruces erup si|
00000090  20 73 69 68 54 20 2e 2e  2e 53 41 4e 44 20 7a 65  | sihT ...SAND ze|
000000a0  6c 75 72 20 65 6e 69 6c  74 73 30 68 67 00 00 00  |lur enilts0hg...|
000000b0  00 00 00 00 00 00 00 00                           |........|

Attack vector:
- Break into the RSA function of a game that is currently unsupported by DNASrep.
- Get the public key
- Create a payload that meets the padding criteria for that public key

Let's try it with a known game.

check_padding at 703978:

looks like it has a flaw in the check. 
0001 ffffffffffffffff 00 message would be the padding in PKCS1.5
0001 00 message works, too
Since message is not checked, the signature can be forged this way.

Unfortunately, the length of the padding is later checked: must be 0x0b bytes
And check_padding also checks for ff between 0001 and 00.
Can we forge a random signature with full padding of 88 bits and not only 24 bits?

With the current method it takes approx. 3 million tries to find a signature
with 3 fixed bytes of the padding. Every bit more doubles the time needed.

We need a shortcut!


